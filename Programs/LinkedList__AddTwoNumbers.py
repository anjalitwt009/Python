# -*- coding: utf-8 -*-
"""LinkedList__AddTwoNumbers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oXGA1RgDIJJubbBATas8zBbIxtcWrgjC

Add two numbers represented by Linked lists. Return head pointer to the output linked list.

Example 1:

*INPUT:*

N=2

M=3

ValN=4,5

ValM=3,4,5

*OUTPUT:*

3,9,0

Example 2:

*INPUT:*

N=2

M=1

ValN=6,3

ValM=7

*OUTPUT:*

7,0
"""

class Node:
  def __init__(self,data):
    self.data=data
    self.reference=None

class LinkedList:
  def __init__(self):
    self.head=None
  def insert_end(self,data):
    presentNode=self.head
    if (presentNode==None):
      self.head=Node(data)
    else:
      while (presentNode.reference!=None):
        presentNode=presentNode.reference
      presentNode.reference=Node(data)
  def insert_beginning(self,data):
    print("--------INSERTING NODE AT THE BEGINNING---------")
    new_data=Node(data)
    new_data.reference=self.head
    self.head=new_data
  def traverse(self):
    presentNode=self.head
    if (presentNode==None):
      print("Linked list is empty")
    else:
      while (presentNode):
        print(presentNode.data)
        presentNode=presentNode.reference
  def int_val(self):
    presentNode=self.head
    val=0
    count=0
    if (presentNode==None):
      print("Linked list is empty")
      return 0
    else:
      while (presentNode):
        count+=1
        presentNode=presentNode.reference
      presentNode=self.head
      while (presentNode):  
        val=val+(presentNode.data)*(10**(count-1))
        count=count-1
        presentNode=presentNode.reference
      return val

#Check
LL=LinkedList()
n1=Node(1)
n2=Node(0)
n3=Node(0)
LL.head=n1
n1.reference=n2
n2.reference=n3

LL1=LinkedList()
n11=Node(1)
n21=Node(1)
n31=Node(1)

LL1.head=n11
n11.reference=n21
n21.reference=n31

x=LL.int_val()
print(x)
y=LL1.int_val()
print(y)

N=int(input("Size of 1st LL:"))
print("Enter the first linked list:")
LL_1=LinkedList()
for i in range(N):
  LL_1.insert_end(int(input()))

N=int(input("Size of 2st LL:"))
print("Enter the second linked list:")
LL_2=LinkedList()
for i in range(N):
  LL_2.insert_end(int(input()))

LL_1.traverse()

LL_2.traverse()

x=LL_1.int_val()
y=LL_2.int_val()
print(x,y)

LL_3=LinkedList()
N=x+y
while (N):
  a=N%10
  LL_3.insert_beginning(a)
  N=N//10

LL_3.traverse()