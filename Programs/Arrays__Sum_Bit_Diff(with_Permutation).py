# -*- coding: utf-8 -*-
"""Arrays__Sum_Bit_Diff(with Permutation).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17LvGyUlFpEPFOmB_fg_iWOo0KeAjoGXL

Find the sum of bit differences in all pairs(Permutation).

Example 1:

*INPUT*:

[2,7]

*OUTPUT*:

Permutation 1:[2,7]
Bit Difference: 010,111=2

Permutation 2:[7,2]
Bit Difference: 111,010=2

SUM=4


Example 2:

*INPUT*:

[1,3,5]

*OUTPUT*:

Permutation 1:[1,3]
Bit Difference: 1

Permutation 2:[3,1]
Bit Difference: 1

Permutation 2:[1,5]
Bit Difference: 1

Permutation 2:[5,1]
Bit Difference: 1

Permutation 2:[3,5]
Bit Difference: 2

Permutation 2:[5,3]
Bit Difference: 2

SUM=8
"""

def permut(A):
  n=len(A)
  sum=0
  for i in range(0,n-1):
    for j in range(i+1,n):
      print("Permutation: ",A[i],A[j])
      ele_first=bit_rep(A[i])
      ele_second=bit_rep(A[j])
      sum=sum+2*bit_cmp(ele_first,ele_second)
  return (sum)


def bit_rep(a):
  bit=[]
  while(a>0):
    dig=a%2
    bit.append(dig)
    a=a//2
  bit.reverse()
  return (bit)

def bit_cmp(A,B):
  n=len(A)
  m=len(B)
  if len(A)>len(B):
    B.reverse()
    for i in range(n-m):
      B.append("0")
    B.reverse()
  elif (len(A)<len(B)):
    A.reverse()
    for i in range(m-n):
      A.append("0")
    A.reverse()
  
  count=0
  for i in range(max(n,m)):
    for j in range(max(n,m)):
      if A[i]==A[j]:
        count=count+1

  return (count)

print("Enter the array elements")
A=list(map(int,input().split(' ')))
print(A)
sum=permut(A)
sum