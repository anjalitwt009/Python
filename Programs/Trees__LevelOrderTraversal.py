# -*- coding: utf-8 -*-
"""Trees__LevelOrderTraversal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oRo4gVKI6O20QLxgsa0tXs5_8Wut9gkW

Level order traversal in time and space O(n).

Example 1:

*INPUT:*

1,2,3,4,5

*OUTPUT:*

1,2,3,4,5

Example 2:

*INPUT:*

1,3,2

*OUTPUT:*

1,3,2
"""

class Node:
  def __init__(self,data):
    self.left=None
    self.data=data
    self.right=None

def height(root):
  if root==None:
    return 0
  else:
    left_sub=height(root.left)
    right_sub=height(root.right)

    if left_sub>right_sub:
      return left_sub+1
    else:
      return right_sub+1

def levelOrder(root):
  h=height(root)
  for i in range(1,h+1):
    print_level(root,i)

def print_level(root,level):
  if root is None:
    return 0
  if level==1:
    print(root.data)
  else:
    print_level(root.left,level-1)
    print_level(root.right,level-1)

def insert_node(new_data,root_node):
  if root_node.data:
    if root_node.data>new_data:
      if root_node.left is None:
        root_node.left=Node(new_data)
      else:
        insert_node(new_data,root_node.left)
    elif new_data>root_node.data:
      if root_node.right is None:
        root_node.right = Node(new_data)
      else:
        insert_node(new_data,root_node.right)
  else:
    root_node.data=new_data

A=list(input("Enter the elements: ").split(' '))
for i in range(len(A)):
  if i==0:
    root=Node(A[i])
  elif (A[i]!='N'):
    insert_node(A[i],root)
levelOrder(root)