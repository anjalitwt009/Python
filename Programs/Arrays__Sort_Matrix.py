# -*- coding: utf-8 -*-
"""Arrays__sort_matrix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uei_sTBB_RFPYQBLV23mUbQd8k2-A4kC

Given nxn matruc where every row and column is sorted in non decreasing order. Print all elementsof matrix in sorted order.

Example:

*INPUT:*

n=4

A=

10  20  30  40

15  25  35  45 

27  29  37  48

32  33  39  50

*OUTPUT:*

10  15  20  25  

27  29  30  32

33  35  37  39  

40  45  48  50
"""

import math

def sort_matrix(A,n):
  B=[]
  matrix_new=[]
  for i in range(n):
    for j in range(n):
      B.append(A[i][j])
  for i in range(n*n-1):
    for j in range(i+1,n*n):
      if (B[j]<B[i]):
        B[j],B[i]=B[i],B[j]
  print(B)
  conv_matrix(B)

def conv_matrix(A):
  n=int(math.sqrt(len(A)))
  B=[]
  mat=[]
  j=0
  while (j<n*n):
    B=[]
    for k in range(n):
      B.append(A[j])
      j=j+1
    mat.append(B)
  print(mat)

#Alternatively, Since each row and column is sorted.
def merge(A,B):
  m,n=0,0
  if A:
    m=len(A)
  if B:
    n=len(B)
  i,j=0,0
  C=[]
  while (i+j<m+n):
    if i==m:
      C.append(B[j])
      j=j+1
    elif j==n:
      C.append(A[i])
      i=i+1
    elif A[i]<B[j]:
      C.append(A[i])
      i=i+1
    elif A[i]>=B[j]:
      C.append(B[j])
      j=j+1

  return C

print("Enter the matrix size: ")
n=int(input())
matrix=[]
for i in range(n):
  a=[]
  for i in range(n):
    a.append(int(input()))
  matrix.append(a)
print(matrix)
sort_matrix(matrix,n)

#Using merge:
print("Enter the matrix size: ")
n=int(input())
matrix=[]
for i in range(n):
  a=[]
  for i in range(n):
    a.append(int(input()))
  matrix.append(a)
print(matrix)

if n<=1:
  print(matrix)
else:
  X=[]
  for i in range(0,n):
    X=merge(X,matrix[i][0:n])
  print(X)

conv_matrix(X)