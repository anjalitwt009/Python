# -*- coding: utf-8 -*-
"""Arrays__RainWaterTrapping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pwj27O3pxKmJvnOt6qCTdasXOK8ZeOWa

Trapping Rain Water.

Given an array arr[] of N non-negative integers representing height of blocks at index i as Ai where the width of each block is 1. Compute how much water can be trapped in between blocks after raining.
Structure is like below:

|  |

|_|

We can trap 2 units of water in the middle gap.

Input:

The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains an integer N denoting the size of the array, followed by N space separated numbers to be stored in array.

Output:

Output the total unit of water trapped in between the blocks.

Constraints:

1 <= T <= 100

3 <= N <= 107

0 <= Ai <= 108

Example:

Input:

2

4

7 4 0 9

3

6 9 9

Output:

10

0

Explanation:

Testcase 1: Water trapped by block of height 4 is 3 units, block of height 0 is 7 units. So, total unit of water trapped is 10 units.
"""

def RWT(A):
  maxl=[]
  maxr=[]
  water=[]

  maxl.append(A[0])
  for i in range(1,len(A)):
    maxl.append(max(maxl[i-1],A[i]))

  maxr.append(A[-1])
  x=0
  for i in range(len(A)-2,-1,-1):
    maxr.append(max(maxr[x],A[i]))
    x=x+1

  maxr.reverse()
  print(maxl)
  print(maxr)

  s=0
  for i in range(len(A)):
    water.append(min(maxr[i],maxl[i])-A[i])
    s=s+water[i]
  print(water)
  print(s)

A=[3,0,0,2,0,4]
RWT(A)