# -*- coding: utf-8 -*-
"""Recursion__Reverse_Stack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A-Mh93fBlltJ4tCCwOtviCWKTlonWgA5
"""

class Stack:
  def __init__(self,n):
    self.stack=[]
    self.size=n

  def push(self,element):
    if (len(self.stack) == self.size):
      printf("STACK IS FULL")
    else:
      self.stack.append(element)

  def pop(self):
    if (len(self.stack) == 0):  #or self.stack==[]
      printf("STACK IS EMPTY")
    else:
      return self.stack.pop()

  def size_stack(self):
    size=len(self.stack)
    return size

  def isempty(self):
    x=self.size
    if x==0:
      print("Stack is empty")
      return 1
    else:
      print("Not empty")
      return 0

  def top(self):
    if len(self.stack)>0:
      #print (len(self.stack))
      return self.stack[len(self.stack)-1]
    else:
      return -1

def rev_stack(s):
  if s.size_stack()==1:
    return s
  temp=s.top()
  s.pop()
  rev_stack(s)
  insert(s,temp)

def insert(s,ele):
  if s.size_stack()==0:
    s.push(ele)
    return s
  temp=s.top()
  s.pop()
  insert(s,ele)
  s.push(temp)
  return s

s=Stack(6)
s.push(1)
s.push(2)
s.push(3)
s.push(4)
s.push(5)
s.push(6)
rev_stack(s)
print("------")
print(s.top())
s.pop()
print(s.top())
s.pop()
print(s.top())
s.pop()
print(s.top())
s.pop()
print(s.top())
s.pop()
print(s.top())
s.pop()
print("------")