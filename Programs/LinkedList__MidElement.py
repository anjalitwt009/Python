# -*- coding: utf-8 -*-
"""LinkedList__MidElement.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iA6g6qPZINkKhrEv-15azTd2lYyvilOl

Find the middle element in Linked list.

Example 1:

*INPUT:*

N=5

Val=1,2,3,4,5

*OUTPUT:*

3

Example 2:

*INPUT:*

N=6

Val=2,4,6,7,5,1

*OUTPUT:*

7
"""

class Node:
  def __init__(self,data):
    self.data=data
    self.reference=None
class LinkedList:
  def __init__(self):
    self.head=None
  def traverse(self):
    presentNode=self.head
    if presentNode==None:
      print("Linked list is empty")
    else:
      while (presentNode):
        print("Data: ",presentNode.data)
        presentNode=presentNode.reference
  def insert_end(self,data):
    print("--------INSERTING NODE AT THE END---------")
    presentNode=self.head
    new_data=Node(data)
    if (presentNode==None):
      self.head=new_data
    else:
      while (presentNode.reference!=None):
        presentNode=presentNode.reference
      presentNode.reference=new_data
    return self.head
  def find_middle(self):
    presentNode=self.head
    count=0
    if (presentNode==None):
      print("Linked list is empty")
    else:
      while (presentNode):
        count+=1
        presentNode=presentNode.reference
      presentNode=self.head
      for i in range((count-1)//2):
        presentNode=presentNode.reference
      if (count%2!=0):
        print("middle element: ",presentNode.data)
      else:
        print("middle element: ",presentNode.reference.data)
  def find_middle2(self,N):
    presentNode=self.head
    if (presentNode==None):
      print("Linked list is empty")
    else:
      for i in range((N-1)//2):
        presentNode=presentNode.reference
      if (N%2!=0):
        print("middle element: ",presentNode.data)
      else:
        print("middle element: ",presentNode.reference.data)

LL1=LinkedList()
LL1.head=None
print("Enter the number of nodes: ")
N=int(input())
for i in range(N):
  print("Enter the data for Linked list: ")
  LL1.insert_end(int(input()))
print("Entered Linked List is: ")
LL1.traverse()
LL1.find_middle()
#Alternatively if N is known
LL1.find_middle2(N)