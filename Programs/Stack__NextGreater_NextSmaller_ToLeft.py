# -*- coding: utf-8 -*-
"""Stack__NextGreater_NextSmaller_toLeft.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-W-ZlmlbOpxn-5m2dQ2Hcoef6RjRyOIy
"""

class Stack:
  def __init__(self,n):
    self.stack=[]
    self.size=n

  def push(self,element):
    if (len(self.stack) == self.size):
      print("STACK IS FULL")
    else:
      self.stack.append(element)

  def pop(self):
    if (len(self.stack) == 0):  #or self.stack==[]
      #print("STACK IS EMPTY")
      return -1
    else:
      return self.stack.pop()
  
  def size_stack(self):
    size=len(self.stack)
    return size

  def isempty(self):
    x=self.size
    if x==0:
      print("Stack is empty")
      return 1
    else:
      print("Not empty")
      return 0

  def top(self):
    if len(self.stack)>0:
      #print (len(self.stack))
      return self.stack[len(self.stack)-1]
    else:
      return -1

def NGL(A):
  out_arr=[]
  s=Stack(len(A))
  for i in range(len(A)):
    if s.size_stack()==0:
      out_arr.append(-1)
    elif s.size_stack()>0 and s.top()>A[i]:
      out_arr.append(s.top())
    elif s.size_stack()>0 and s.top()<A[i]:
      while (s.size_stack()>0):
        if (s.top()<A[i]):
          s.pop()
          #print(s.size_stack())
        else:
          break
      if s.size_stack()==0:
        out_arr.append(-1)
      else:
        out_arr.append(s.top())
    s.push(A[i])
  #out_arr.reverse()
  print(out_arr)

def NSL(A):
  out_arr=[]
  s=Stack(len(A))
  for i in range(len(A)):
    if s.size_stack()==0:
      out_arr.append(-1)
    elif s.size_stack()>0 and s.top()<A[i]:
      out_arr.append(s.top())
    elif s.size_stack()>0 and s.top()>A[i]:
      while (s.size_stack()>0):
        if (s.top()>A[i]):
          s.pop()
          #print(s.size_stack())
        else:
          break
      if s.size_stack()==0:
        out_arr.append(-1)
      else:
        out_arr.append(s.top())
    s.push(A[i])
  #out_arr.reverse()
  print(out_arr)

A=[100,80,60,70,60,75,85]
NGL(A)
NSL(A)