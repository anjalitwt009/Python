# -*- coding: utf-8 -*-
"""Stack__Using_LinkedList.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DnctvCI5pIeFikJXyD4n2iuShv-0tiiR
"""

class Node:
  def __init__(self,data):
    self.data=data
    self.reference=None

class LinkedList:
  def __init__(self):
    self.head=None
  def insert_end(self,new_data):
    presentNode=self.head
    new_node=Node(new_data)
    if (presentNode==None):
      self.head=new_node
      return 0
    while (presentNode.reference!=None):
      presentNode=presentNode.reference
    presentNode.reference=new_node
  def remove_last(self):
    presentNode=self.head
    if (presentNode==None):
      print("NO ELEMENT PRESENT")
      return None
    elif (presentNode.reference==None):
      element=presentNode.data
      self.head=None
      return element
    else:
      while (presentNode.reference.reference):
        presentNode=presentNode.reference
      element=(presentNode.reference.data)
      presentNode.reference=None
      return element
  def traverse(self):
    presentNode=self.head
    while (presentNode):
      print(presentNode.data)
      presentNode=presentNode.reference
  def push(self,ele):
    self.insert_end(ele)
  def pop(self):
    element=self.remove_last()
    print("POPPED ELEMENT: ",element)

LL=LinkedList()
n1=Node(10)
n2=Node(20)
n3=Node(30)
LL.head=n1
n1.reference=n2
n2.reference=n3
LL.traverse()
LL.push(60)
LL.push(80)
LL.traverse()
LL.pop()
LL.pop()
LL.pop()
LL.traverse()