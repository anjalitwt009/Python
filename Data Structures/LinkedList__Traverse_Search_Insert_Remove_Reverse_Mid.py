# -*- coding: utf-8 -*-
"""LinkedList.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OjS3aQIKFEnmEM_WjYqi_SiVsW-mIwLW
"""

class Node:
  def __init__(self,data):
    self.data=data
    self.reference=None

class LinkedList:
  def __init__(self):
    self.head=None
  def traverse(self):
    print("--------TRAVERSING---------")
    presentNode=self.head
    if (presentNode==None):
      print("LINKED LIST IS EMPTY")
      return 0
    while (presentNode):
      print(presentNode.data)
      presentNode=presentNode.reference
  def insert_beginning(self,data):
    print("--------INSERTING NODE AT THE BEGINNING---------")
    new_data=Node(data)
    new_data.reference=self.head
    self.head=new_data
  def insert_end(self,data):
    print("--------INSERTING NODE AT THE END---------")
    presentNode=self.head
    new_data=Node(data)
    if (presentNode==None):
      self.head=newdata
      return 0
    while (presentNode.reference!=None):
      presentNode=presentNode.reference
    presentNode.reference=new_data
  def insert_between(self,insert_data,new_data):
    print("--------INSERTING NODE AFTER {}---------".format(insert_data.data))
    presentNode=self.head
    new_data=Node(new_data)
    try:
      while (presentNode.reference!=insert_data):
        presentNode=presentNode.reference
      new_data.reference=presentNode.reference
      presentNode.reference=new_data
    except:
      print("ERROR INSERTING")
  def remove(self,rem_data):
    print("--------REMOVING NODE---------")
    presentNode=self.head
    while (presentNode.reference):
      if (presentNode.reference==rem_data):
        presentNode.reference=rem_data.reference
      presentNode=presentNode.reference
  def finding_mid(self):
    print("--------FINDING THE MIDDLE ELEMENT---------")
    count=0
    presentNode=self.head
    while (presentNode):
      count+=1
      presentNode=presentNode.reference
    presentNode=self.head
    print("Count:",count)
    for i in range((count-1)//2):
      presentNode=presentNode.reference
      if i==(((count-1)//2)-1):
        if count%2==0:
          nextNode=presentNode.reference
          print("Even number of nodes present:",presentNode.data,nextNode.data)
        else:
          print("Odd number of nodes present:",presentNode.data)
  def reverseLL(self):
    print("--------REVERSING THE LINKED LIST---------")
    previousNode=None
    presentNode=self.head
    nextNode=presentNode.reference
    while nextNode:
      presentNode.reference=previousNode
      previousNode=presentNode
      presentNode=nextNode
      nextNode=nextNode.reference
    presentNode.reference=previousNode
    self.head=presentNode
  def search(self,find_data):
    print("--------SEARCHING ELEMENT---------")
    presentNode=self.head
    while (presentNode):
      if (presentNode.data==find_data):
        print("--------ELEMENT '{}' FOUND---------".format(find_data))
        return 0
      presentNode=presentNode.reference
    print("--------ELEMENT '{}' NOT FOUND---------".format(find_data))

n1=Node(1)
n2=Node(2)
n3=Node(3)
n4=Node(4)
n5=Node(5)
n6=Node(6)
LL=LinkedList()
LL.head=n1
n1.reference=n2
n2.reference=n3
n3.reference=n4
n4.reference=n5
n5.reference=n6
LL.traverse()
LL.finding_mid()
LL.reverseLL()
LL.traverse()
LL.remove(n5)
LL.traverse()
LL.insert_between(n3,7)
LL.traverse()
LL.insert_end(10)
LL.traverse()
LL.insert_beginning(5)
LL.traverse()
new_LL=LinkedList()
new_LL.insert_beginning('x')
new_LL.traverse()
new_LL.insert_end('a')
new_LL.traverse()
new_LL.search('a')
new_LL.search('Z')